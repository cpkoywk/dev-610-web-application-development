// 1. Suppose the following array has been declared:
// // index 0 1 2 3 4 5 6 7 8 9
// int[] list = {–2, 8, 13, 22, 25, 25, 38, 42, 51, 103};
// What indexes will be examined as the middle element by a binary search for each of the following target values?
// What value will be returned?
// a. 103: 4,7,8 9. return 103
// b. 30: 4,7,5,6 return -1
// c. 8: 4,1 return 8
// d. –1: 4, 1, 0; return -1

// 2. Suppose the following array has been declared:
// // index         0   1  2  3   4   5   6   7   8   9  10  11
// int[] numbers = {–1, 3, 5, 8, 15, 18, 22, 39, 40, 42, 50, 57};
// What indexes will be examined as the middle element by a binary search for each of the following target values?
// What value will be returned?
// a. 13: 5, 2, 3,4; return -1
// b. 39: 5, 8, 6, 7, return 7
// c. 50: 5, 8, 10; return 10
// d. 2: 5,2,0; return 0

// 3. Suppose the following array has been declared:
// // index         0  1  2  3   4    5   6   7   8   9  10   11 12  13   14
// int[] numbers = {0, 0, 5, 10, 15, 40, 55, 60, 65, 70, 80, 85, 90, 95, 300};
// What indexes will be examined as the middle element by a binary search for each of the following target values?
// What value will be returned?
// a. 65: 7, 11, 9, 8; return 8
// b. 9: 7,3,1; return -1
// c. 90: 7, 11, 13, 12; return 12
// d. 147; 7, 11,13,14; return -1

//4.  O(N), because the runtime of the algorithm scales linearly with the size of the input array.

//5.  O(N).

//6. O(N**2)

//7. O(N)

//8. Array numbers1: {63, 9, 45, 72, 27, 18, 54, 36}

// 1st pass: 9, {63, 45, 72, 27, 18, 54, 36}
// 2nd pass: 9, 18, {63, 45, 72, 27, 54, 36}
// 3rd pass: 9, 18, 27, {63, 45, 72, 54, 36}
// 4th pass: 9, 18, 27, 36, {63, 45, 72, 54}
// 5th pass: 9, 18, 27, 36, 45, {63, 72, 54}
// 6th pass: 9, 18, 27, 36, 45, 54, {63, 72}
// 7th pass: 9, 18, 27, 36, 45, 54, 63, {72}
// 8th pass: 9, 18, 27, 36, 45, 54, 63, 72

// Array numbers2:
// Original: {37, 29, 19, 48, 23, 55, 74, 12}

// 1st pass: 12, {37, 29, 19, 48, 23, 55, 74}
// 2nd pass: 12, 19, {37, 29, 48, 23, 55, 74}
// 3rd pass: 12, 19, 23, {37, 29, 48, 55, 74}
// 4th pass: 12, 19, 23, 29, {37, 48, 55, 74}
// 5th pass: 12, 19, 23, 29, 37, {48, 55, 74}
// 6th pass: 12, 19, 23, 29, 37, 48, {55, 74}
// 7th pass: 12, 19, 23, 29, 37, 48, 55, {74}
// 8th pass: 12, 19, 23, 29, 37, 48, 55, 74

// 9. for {63, 9, 45, 72, 27, 18, 54, 36}

// Split:
// {63, 9, 45, 72} and {27, 18, 54, 36}
// {63, 9} and {45, 72}
// {63} and {9}
// {45} and {72}
// {27, 18} and {54, 36}
// {27} and {18}
// {54} and {36}
// Merge:
// {9, 63} and {45, 72}
// Result: {9, 45, 63, 72}
// {18, 27} and {36, 54}
// Result: {18, 27, 36, 54}
// {9, 45, 63, 72} and {18, 27, 36, 54}
// Result: {9, 18, 27, 36, 45, 54, 63, 72}

// For: {37, 29, 19, 48, 23, 55, 74, 12}
// Split:
// {37, 29, 19, 48} and {23, 55, 74, 12}
// {37, 29} and {19, 48}
// {37} and {29}
// {19} and {48}
// {23, 55} and {74, 12}
// {23} and {55}
// {74} and {12}
// Merge:
// {29, 37} and {19, 48}
// Result: {19, 29, 37, 48}
// {23, 55} and {12, 74}
// Result: {12, 23, 55, 74}
// {19, 29, 37, 48} and {12, 23, 55, 74}
// Result: {12, 19, 23, 29, 37, 48, 55, 74}



// 10. 
// Array numbers3: {8, 5, -9, 14, 0, -1, -7, 3}

// 1st pass: -9, {8, 5, 14, 0, -1, -7, 3}
// 2nd pass: -9, -7, {8, 5, 14, 0, -1, 3}
// 3rd pass: -9, -7, -1, {8, 5, 14, 0, 3}
// 4th pass: -9, -7, -1, 0, {8, 5, 14, 3}
// 5th pass: -9, -7, -1, 0, 3, {8, 5, 14}
// 6th pass: -9, -7, -1, 0, 3, 5, {8, 14}
// 7th pass: -9, -7, -1, 0, 3, 5, 8, {14}
// 8th pass: -9, -7, -1, 0, 3, 5, 8, 14

// Array numbers4: {15, 56, 24, 5, 39, -4, 27, 10}

// 1st pass: -4, {15, 56, 24, 5, 39, 27, 10}
// 2nd pass: -4, 5, {15, 56, 24, 39, 27, 10}
// 3rd pass: -4, 5, 10, {15, 56, 24, 39, 27}
// 4th pass: -4, 5, 10, 15, {56, 24, 39, 27}
// 5th pass: -4, 5, 10, 15, 24, {56, 39, 27}
// 6th pass: -4, 5, 10, 15, 24, 27, {56, 39}
// 7th pass: -4, 5, 10, 15, 24, 27, 39, {56}
// 8th pass: -4, 5, 10, 15, 24, 27, 39, 56

// 11. For: {8, 5, -9, 14, 0, -1, -7, 3}

// Split:
// {8, 5, -9, 14} and {0, -1, -7, 3}
// {8, 5} and {-9, 14}
// {8} and {5}
// {-9} and {14}
// {0, -1} and {-7, 3}
// {0} and {-1}
// {-7} and {3}
// Merge:
// {5, 8} and {-9, 14}
// Result: {-9, 5, 8, 14}
// {-1, 0} and {-7, 3}
// Result: {-7, -1, 0, 3}
// {-9, 5, 8, 14} and {-7, -1, 0, 3}
// Result: {-9, -7, -1, 0, 3, 5, 8, 14}

// For {15, 56, 24, 5, 39, -4, 27, 10}
// Split:
// {15, 56, 24, 5} and {39, -4, 27, 10}
// {15, 56} and {24, 5}
// {15} and {56}
// {24} and {5}
// {39, -4} and {27, 10}
// {39} and {-4}
// {27} and {10}
// Merge:
// {15, 56} and {5, 24}
// Result: {5, 15, 24, 56}
// {-4, 39} and {10, 27}
// Result: {-4, 10, 27, 39}
// {5, 15, 24, 56} and {-4, 10, 27, 39}
// Result: {-4, 5, 10, 15, 24, 27, 39, 56}

//12. 
// For  {22, 44, 11, 88, 66, 33, 55, 77}

// 1st pass: 11, {22, 44, 88, 66, 33, 55, 77}
// 2nd pass: 11, 22, {44, 88, 66, 33, 55, 77}
// 3rd pass: 11, 22, 33, {44, 88, 66, 55, 77}
// 4th pass: 11, 22, 33, 44, {88, 66, 55, 77}
// 5th pass: 11, 22, 33, 44, 55, {88, 66, 77}
// 6th pass: 11, 22, 33, 44, 55, 66, {88, 77}
// 7th pass: 11, 22, 33, 44, 55, 66, 77, {88}
// 8th pass: 11, 22, 33, 44, 55, 66, 77, 88

// For numbers6: {-3, -6, -1, -5, 0, -2, -4, -7}

// 1st pass: -7, {-3, -6, -1, -5, 0, -2, -4}
// 2nd pass: -7, -6, {-3, -1, -5, 0, -2, -4}
// 3rd pass: -7, -6, -5, {-3, -1, 0, -2, -4}
// 4th pass: -7, -6, -5, -4, {-3, -1, 0, -2}
// 5th pass: -7, -6, -5, -4, -3, {-1, 0, -2}
// 6th pass: -7, -6, -5, -4, -3, -2, {-1, 0}
// 7th pass: -7, -6, -5, -4, -3, -2, -1, {0}
// 8th pass: -7, -6, -5, -4, -3, -2, -1, 0

//13. For : {22, 44, 11, 88, 66, 33, 55, 77}
// Split:
// {22, 44, 11, 88} and {66, 33, 55, 77}
// {22, 44} and {11, 88}
// {22} and {44}
// {11} and {88}
// {66, 33} and {55, 77}
// {66} and {33}
// {55} and {77}
// Merge:
// {22, 44} and {11, 88}
// Result: {11, 22, 44, 88}
// {33, 66} and {55, 77}
// Result: {33, 55, 66, 77}
// {11, 22, 44, 88} and {33, 55, 66, 77}
// Result: {11, 22, 33, 44, 55, 66, 77, 88}

// For numbers6:{-3, -6, -1, -5, 0, -2, -4, -7}
// Split:
// {-3, -6, -1, -5} and {0, -2, -4, -7}
// {-3, -6} and {-1, -5}
// {-3} and {-6}
// {-1} and {-5}
// {0, -2} and {-4, -7}
// {0} and {-2}
// {-4} and {-7}
// Merge:
// {-6, -3} and {-5, -1}
// Result: {-6, -5, -3, -1}
// {-2, 0} and {-7, -4}
// Result: {-7, -4, -2, 0}
// {-6, -5, -3, -1} and {-7, -4, -2, 0}
// Result: {-7, -6, -5, -4, -3, -2, -1, 0}